name: Upstream-dev CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    types: [opened, reopened, synchronize, labeled]
  schedule:
    - cron: "0 0 * * 1" # Mondays “At 00:00” UTC
  workflow_dispatch: # allows you to trigger the workflow run manually

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-ci-trigger:
    name: detect ci trigger
    runs-on: ubuntu-latest
    if: |
      github.repository_owner == 'mdhaber' && github.event_name == 'pull_request'
    outputs:
      triggered: ${{ steps.detect-trigger.outputs.trigger-found }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: xarray-contrib/ci-trigger@v1
        id: detect-trigger
        with:
          keyword: "[test-upstream]"

  tests:
    name: upstream-dev
    runs-on: ubuntu-latest
    needs: detect-ci-trigger
    if: |
      always()
      && (
        (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        || needs.detect-ci-trigger.outputs.triggered == 'true'
        || contains(github.event.pull_request.labels.*.name, 'run-upstream')
      )

    defaults:
      run:
        shell: bash -leo pipefail {0} {0}

    strategy:
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.39.4
          cache: true
          environments: ci-upstream-dev

      - name: Run tests
        if: success()
        id: run-tests
        run: |
          pixi run --environment=ci-upstream-dev tests-log

      - name: Generate and publish a failure report
        if: |
          failure()
          && steps.run-tests.outcome == 'failure'
          && github.event_name == 'schedule'
          && github.repository_owner == 'xarray-contrib'
        uses: xarray-contrib/issue-from-pytest-log@v1
        with:
          log-path: output-log.jsonl
